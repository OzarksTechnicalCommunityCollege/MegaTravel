on:
  push:
    branches: [ deployment ]
  pull_request:
    branches: [ deployment ]

name: Deployment of MegaTravelAPI

jobs:
  deploy:
    name: Deploy
    runs-on: windows-latest

    steps:
    # - name: Install Octopus CLI
    #   uses: OctopusDeploy/install-octopus-cli-action@v1.1.1
    #   with:
    #       version: latest

    - name: Checkout
      uses: actions/checkout@v3

   - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.0

    # - name: Build
    #   run: |
    #     ls
    #     ls -adotnet build

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: "maegatravelapi"
        IMAGE_TAG: "latest"
      run: |
        ls
        ls -a
        cd MegaTravelAPI/MegaTravelAPI
        # Build a docker container and push it to ECR 
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        # Deleteing untagged images from ECR 
        IMAGES_TO_DELETE=$(aws ecr list-images --region us-east-1 --repository-name $ECR_REPOSITORY --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json)
        echo $IMAGES_TO_DELETE
        aws ecr batch-delete-image --region us-east-1 --repository-name $ECR_REPOSITORY --image-ids "$IMAGES_TO_DELETE" || true
    - name: executing remote ssh commands using ssh key
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        port: ${{ secrets.PORT }}
        script: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 464485023635.dkr.ecr.us-east-1.amazonaws.com          docker pull 464485023635.dkr.ecr.us-east-1.amazonaws.com/maegatravelapi:latest
          #Stop container
          docker stop demoapp          
          #Remove all untagged images
          docker system  prune -a -f
          docker run -d -p 80:80 --name demoapp -it 464485023635.dkr.ecr.us-east-1.amazonaws.com/maegatravelapi
